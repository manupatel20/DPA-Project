labs(
title = "Forecast of EV Registrations (ARIMA Model)",
subtitle = "With 80% and 95% Confidence Intervals",
x = "Year",
y = "Number of Registrations"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
# # Create time series object
# ev_ts <- ts(ev_yearly$Total_Registrations, start = min(ev_yearly$Sale.Year), frequency = 1)
#
# # Fit ARIMA model
# arima_model <- auto.arima(ev_ts)
#
# # Forecast next 5 years
# arima_forecast <- forecast(arima_model, h = 5)
#
# # Plot forecast
# autoplot(arima_forecast) +
#   labs(title = "ARIMA Forecast of EV Registrations",
#        x = "Year",
#        y = "Number of Registrations") +
#   theme_minimal()
library(forecast)
library(ggplot2)
# Create time series object
ev_ts <- ts(ev_yearly$Total_Registrations, start = min(ev_yearly$Sale.Year), frequency = 1)
# Fit ARIMA model
arima_model <- auto.arima(ev_ts)
# Forecast next 5 years
arima_forecast <- forecast(arima_model, h = 5)
# Convert forecast to dataframe for ggplot
fc_df <- data.frame(
Year = seq(from = max(ev_yearly$Sale.Year) + 1, by = 1, length.out = 5),
Forecast = arima_forecast$mean,
Lo80 = arima_forecast$lower[, 1],
Hi80 = arima_forecast$upper[, 1],
Lo95 = arima_forecast$lower[, 2],
Hi95 = arima_forecast$upper[, 2]
)
# Combine with historical data for plotting
hist_df <- ev_yearly %>%
rename(Year = Sale.Year, Registrations = Total_Registrations)
# Plot
ggplot() +
# Historical data
geom_line(data = hist_df, aes(x = Year, y = Registrations), color = "#2c3e50", size = 1.2) +
geom_point(data = hist_df, aes(x = Year, y = Registrations), color = "#2980b9", size = 2) +
# Forecast line
geom_line(data = fc_df, aes(x = Year, y = Forecast), color = "#e74c3c", linetype = "dashed", size = 1.2) +
geom_ribbon(data = fc_df, aes(x = Year, ymin = Lo95, ymax = Hi95), fill = "#e74c3c", alpha = 0.15) +
geom_ribbon(data = fc_df, aes(x = Year, ymin = Lo80, ymax = Hi80), fill = "#e74c3c", alpha = 0.25) +
scale_x_continuous(breaks = seq(min(hist_df$Year), max(fc_df$Year), by = 1)) +
# Titles and theme
labs(
title = "Forecast of EV Registrations (ARIMA Model)",
subtitle = "With 80% and 95% Confidence Intervals",
x = "Year",
y = "Number of Registrations"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
# Prepare data for Prophet
prophet_data <- ev_yearly %>%
rename(ds = Sale.Year, y = Total_Registrations) %>%
mutate(ds = as.Date(paste0(ds, "-01-01")))
# Fit Prophet model
prophet_model <- prophet(prophet_data)
# Create future dataframe for next 5 years
future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
# Forecast
forecast <- predict(prophet_model, future)
# Plot forecast
plot(prophet_model, forecast) +
labs(title = "Prophet Forecast of EV Registrations")
# # Prepare data for Prophet
# prophet_data <- ev_yearly %>%
#   rename(ds = Sale.Year, y = Total_Registrations) %>%
#   mutate(ds = as.Date(paste0(ds, "-01-01")))
#
# # Fit Prophet model
# prophet_model <- prophet(prophet_data)
#
# # Create future dataframe for next 5 years
# future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
#
# # Forecast
# forecast <- predict(prophet_model, future)
#
# # Plot forecast
# plot(prophet_model, forecast) +
#   labs(title = "Prophet Forecast of EV Registrations")
library(prophet)
library(ggplot2)
library(dplyr)
library(scales)
# Prepare data for Prophet
prophet_data <- ev_yearly %>%
rename(ds = Sale.Year, y = Total_Registrations) %>%
mutate(ds = as.Date(paste0(ds, "-01-01")))
# Fit Prophet model
prophet_model <- prophet(prophet_data)
# Create future dataframe for next 5 years
future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
# Forecast
forecast <- predict(prophet_model, future)
# Merge actual and forecast data for plotting
forecast_plot <- forecast %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
left_join(prophet_data, by = "ds")
# Custom ggplot
ggplot(forecast_plot, aes(x = ds)) +
geom_ribbon(aes(ymin = yhat_lower, ymax = yhat_upper), fill = "#cce5ff", alpha = 0.4) +
geom_line(aes(y = yhat), color = "#0073e6", size = 1.2, linetype = "dashed") +
geom_point(aes(y = y), color = "#1c4587", size = 2) +
geom_line(aes(y = y), color = "#1c4587", size = 1) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Prophet Forecast of EV Registrations",
x = "Year",
y = "Number of Registrations"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold")
)
# # Prepare data for Prophet
# prophet_data <- ev_yearly %>%
#   rename(ds = Sale.Year, y = Total_Registrations) %>%
#   mutate(ds = as.Date(paste0(ds, "-01-01")))
#
# # Fit Prophet model
# prophet_model <- prophet(prophet_data)
#
# # Create future dataframe for next 5 years
# future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
#
# # Forecast
# forecast <- predict(prophet_model, future)
#
# # Plot forecast
# plot(prophet_model, forecast) +
#   labs(title = "Prophet Forecast of EV Registrations")
library(prophet)
library(ggplot2)
library(dplyr)
library(scales)
# Prepare data for Prophet
prophet_data <- ev_yearly %>%
rename(ds = Sale.Year, y = Total_Registrations) %>%
mutate(ds = as.Date(paste0(ds, "-01-01")))
# Fit Prophet model
prophet_model <- prophet(prophet_data)
# Create future dataframe for next 5 years
future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
# Forecast
forecast <- predict(prophet_model, future)
# Merge actual and forecast data for plotting
forecast_plot <- forecast %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
mutate(ds = as.Date(ds)) %>%     # <-- Ensure it's Date type
left_join(prophet_data, by = "ds")
# Custom ggplot
ggplot(forecast_plot, aes(x = ds)) +
geom_ribbon(aes(ymin = yhat_lower, ymax = yhat_upper), fill = "#cce5ff", alpha = 0.4) +
geom_line(aes(y = yhat), color = "#0073e6", size = 1.2, linetype = "dashed") +
geom_point(aes(y = y), color = "#1c4587", size = 2) +
geom_line(aes(y = y), color = "#1c4587", size = 1) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Prophet Forecast of EV Registrations",
x = "Year",
y = "Number of Registrations"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold")
)
library(dplyr)
library(lubridate)
library(ggplot2)
# STEP 1: Convert the registration column to Date format
ev_data <- ev_data %>%
mutate(Sale.Date = mdy(Sale.Date))  # or use dmy() / ymd() based on format
library(dplyr)
library(lubridate)
library(ggplot2)
# STEP 1: Convert the registration column to Date format
ev_population_data <- ev_population_data %>%
mutate(Sale.Date = mdy(Sale.Date))  # or use dmy() / ymd() based on format
# STEP 2: Extract month and year, and create a Month-Year factor column
ev_data <- ev_data %>%
mutate(
Year = year(Sale.DateDate),
Month = month(Sale.DateDate),
Month.Year = format(Registration_Date, "%Y-%m")  # for proper ordering
)
library(dplyr)
library(lubridate)
library(ggplot2)
# STEP 1: Convert the registration column to Date format
ev_population_data <- ev_population_data %>%
mutate(Sale.Date = mdy(Sale.Date))  # or use dmy() / ymd() based on format
# STEP 2: Extract month and year, and create a Month-Year factor column
ev_population_data <- ev_population_data %>%
mutate(
Year = year(Sale.DateDate),
Month = month(Sale.DateDate),
Month.Year = format(Registration_Date, "%Y-%m")  # for proper ordering
)
# STEP 1: Convert the registration column to Date format
ev_population_data <- ev_population_data %>%
mutate(Sale.Date = mdy(Sale.Date))  # or use dmy() / ymd() based on format
# STEP 2: Extract month and year, and create a Month-Year factor column
ev_population_data <- ev_population_data %>%
mutate(
Year = year(Sale.Date),
Month = month(Sale.Date),
Month.Year = format(Sale.Date, "%Y-%m")  # for proper ordering
)
ev_population_data <- read.csv("../Dataset/cleaned_ev_data.csv")
summary(ev_population_data)
ev_population_data <- ev_population_data %>%
mutate(Make.Model = paste(Make, Model, sep = " "))  # Concatenates with space
# Removing data related to 2025 as we just have data of few months
ev_population_data <- ev_population_data %>%
filter(Sale.Year != 2025)
# Install packages if not already installed
required_packages <- c("readr", "dplyr", "lubridate", "ggplot2", "forecast", "prophet")
installed_packages <- rownames(installed.packages())
for (pkg in required_packages) {
if (!(pkg %in% installed_packages)) {
install.packages(pkg)
}
}
# Load libraries
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
library(prophet)
ev_yearly <- ev_population_data %>%
group_by(Sale.Year) %>%
summarise(Total_Registrations = n()) %>%
arrange(Sale.Year)
ggplot(ev_yearly, aes(x = factor(Sale.Year), y = Total_Registrations, group = 1)) +
geom_line(color = "blue") +
geom_point(color = "darkblue") +
labs(title = "Total EV Registrations by Year in Washington State",
x = "Year",
y = "Number of Registrations") +
theme_minimal()
# Identify top 5 Make+Model combinations
top_models <- ev_population_data %>%
count(Make.Model, sort = TRUE) %>%
top_n(5, n) %>%
pull(Make.Model)
# Filter data for top models
ev_top_models <- ev_population_data %>%
filter(Make.Model %in% top_models)
# Aggregate registrations by Year and Make_Model
ev_model_yearly <- ev_top_models %>%
group_by(Sale.Year, Make.Model) %>%
summarise(Registrations = n()) %>%
ungroup()
# Plot trends
ggplot(ev_model_yearly, aes(x = factor(Sale.Year), y = Registrations, color = Make.Model)) +
geom_line() +
geom_point() +
labs(title = "EV Registrations Over Time by Make and Model",
x = "Year",
y = "Number of Registrations",
color = "Make and Model") +
theme_minimal()
# Aggregate registrations by Year and Electric Vehicle Type
ev_type_yearly <- ev_population_data %>%
group_by(Sale.Year, Clean.Alternative.Fuel.Vehicle.Type) %>%
summarise(Registrations = n()) %>%
ungroup()
# Plot trends
ggplot(ev_type_yearly, aes(x = Sale.Year, y = Registrations, color = Clean.Alternative.Fuel.Vehicle.Type)) +
geom_line() +
geom_point() +
labs(title = "EV Registrations Over Time by Vehicle Type",
x = "Year",
y = "Number of Registrations",
color = "Vehicle Type") +
theme_minimal()
# Calculate growth rates for top models
ev_model_growth <- ev_model_yearly %>%
group_by(Make.Model) %>%
arrange(Sale.Year) %>%
mutate(Growth_Rate = (Registrations - lag(Registrations)) / lag(Registrations) * 100) %>%
ungroup()
# Plot growth rates
ggplot(ev_model_growth, aes(x = Sale.Year, y = Growth_Rate, color = Make.Model)) +
geom_line() +
geom_point() +
labs(title = "Year-over-Year Growth Rates by Make and Model",
x = "Year",
y = "Growth Rate (%)",
color = "Make and Model") +
theme_minimal()
# Determine top Make+Model for each year
top_models_per_year <- ev_population_data %>%
group_by(Sale.Year, Make.Model) %>%
summarise(Registrations = n()) %>%
arrange(Sale.Year, desc(Registrations)) %>%
slice_head(n = 1) %>%
ungroup()
# Display results
print(top_models_per_year)
# # Create time series object
# ev_ts <- ts(ev_yearly$Total_Registrations, start = min(ev_yearly$Sale.Year), frequency = 1)
#
# # Fit ARIMA model
# arima_model <- auto.arima(ev_ts)
#
# # Forecast next 5 years
# arima_forecast <- forecast(arima_model, h = 5)
#
# # Plot forecast
# autoplot(arima_forecast) +
#   labs(title = "ARIMA Forecast of EV Registrations",
#        x = "Year",
#        y = "Number of Registrations") +
#   theme_minimal()
library(forecast)
library(ggplot2)
# Create time series object
ev_ts <- ts(ev_yearly$Total_Registrations, start = min(ev_yearly$Sale.Year), frequency = 1)
# Fit ARIMA model
arima_model <- auto.arima(ev_ts)
# Forecast next 5 years
arima_forecast <- forecast(arima_model, h = 5)
# Convert forecast to dataframe for ggplot
fc_df <- data.frame(
Year = seq(from = max(ev_yearly$Sale.Year) + 1, by = 1, length.out = 5),
Forecast = arima_forecast$mean,
Lo80 = arima_forecast$lower[, 1],
Hi80 = arima_forecast$upper[, 1],
Lo95 = arima_forecast$lower[, 2],
Hi95 = arima_forecast$upper[, 2]
)
# Combine with historical data for plotting
hist_df <- ev_yearly %>%
rename(Year = Sale.Year, Registrations = Total_Registrations)
# Plot
ggplot() +
# Historical data
geom_line(data = hist_df, aes(x = Year, y = Registrations), color = "#2c3e50", size = 1.2) +
geom_point(data = hist_df, aes(x = Year, y = Registrations), color = "#2980b9", size = 2) +
# Forecast line
geom_line(data = fc_df, aes(x = Year, y = Forecast), color = "#e74c3c", linetype = "dashed", size = 1.2) +
geom_ribbon(data = fc_df, aes(x = Year, ymin = Lo95, ymax = Hi95), fill = "#e74c3c", alpha = 0.15) +
geom_ribbon(data = fc_df, aes(x = Year, ymin = Lo80, ymax = Hi80), fill = "#e74c3c", alpha = 0.25) +
scale_x_continuous(breaks = seq(min(hist_df$Year), max(fc_df$Year), by = 1)) +
# Titles and theme
labs(
title = "Forecast of EV Registrations (ARIMA Model)",
subtitle = "With 80% and 95% Confidence Intervals",
x = "Year",
y = "Number of Registrations"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
ev_population_data <- ev_population_data %>%
mutate(
Month.Year = format(Sale.Date, "%Y-%m")  # for proper ordering
)
ev_population_data <- ev_population_data %>%
mutate(Sale.Month.Year = paste(Sale.Month, Sale.Year, sep = " "))  # Concatenates with space
View(ev_data)
library(dplyr)
library(lubridate)
library(ggplot2)
# STEP 2: Extract month and year, and create a Month-Year factor column
ev_population_data <- ev_population_data %>%
mutate(Sale.Month.Year = paste(Sale.Month, Sale.Year, sep = " "))  # Concatenates with space
# STEP 3: Aggregate registrations per month
monthly_trends <- ev_population_data %>%
group_by(Sale.Month.Year) %>%
summarise(EV_Registrations = n()) %>%
ungroup()
# STEP 4: Plot the trend
ggplot(monthly_trends, aes(x = as.Date(paste0(Sale.Month.Year, "-01")), y = EV_Registrations)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "darkblue") +
labs(
title = "Monthly Trend of EV Registrations",
x = "Month-Year",
y = "Number of Registrations"
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +
theme_minimal(base_size = 13) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ev_population_data_new <- ev_population_data %>%
mutate(
Sale.Date = as.Date(Sale.Date, format = "%B %d %Y"),
Sale.Month.Year = format(Sale.Date, "%Y-%m")
)
View(ev_population_data_new)
library(dplyr)
library(lubridate)
library(ggplot2)
ev_population_data <- ev_population_data %>%
mutate(
Sale.Date = as.Date(Sale.Date, format = "%B %d %Y"),
Sale.Month.Year = format(Sale.Date, "%Y-%m")
)
# STEP 3: Aggregate registrations per month
monthly_trends <- ev_population_data %>%
group_by(Sale.Month.Year) %>%
summarise(EV_Registrations = n()) %>%
ungroup()
# STEP 4: Plot the trend
ggplot(monthly_trends, aes(x = as.Date(paste0(Sale.Month.Year, "-01")), y = EV_Registrations)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "darkblue") +
labs(
title = "Monthly Trend of EV Registrations",
x = "Month-Year",
y = "Number of Registrations"
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +
theme_minimal(base_size = 13) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# STEP 4: Convert to time series (ts object)
# Define start and frequency (monthly = 12)
start_year <- year(min(monthly_trends$Sale.Month.Year))
# STEP 4: Convert to time series (ts object)
# Define start and frequency (monthly = 12)
# monthly_trends <- monthly_trends %>%
#   mutate(Sale.Month.Year = as.Date(Sale.Month.Year))
start_year <- year(as.Date(min(monthly_trends$Sale.Month.Year)))
# STEP 4: Convert to time series (ts object)
# Define start and frequency (monthly = 12)
monthly_trends <- monthly_trends %>%
mutate(Sale.Month.Year = as.Date(Sale.Month.Year))
# STEP 4: Convert to time series (ts object)
# Define start and frequency (monthly = 12)
# monthly_trends <- monthly_trends %>%
#   mutate(Sale.Month.Year = as.Date(Sale.Month.Year))
#
# start_year <- year(min(monthly_trends$Sale.Month.Year))
# start_month <- month(min(monthly_trends$Sale.Month.Year))
start_date <- as.Date(min(monthly_trends$Sale.Month.Year))
# STEP 4: Convert to time series (ts object)
# Define start and frequency (monthly = 12)
monthly_trends <- monthly_trends %>%
mutate(Sale.Month.Year = as.Date(paste0(Sale.Month.Year, "-01")))
# start_year <- year(min(monthly_trends$Sale.Month.Year))
# start_month <- month(min(monthly_trends$Sale.Month.Year))
start_date <- min(monthly_trends$Sale.Month.Year)
start_year <- year(start_date)
start_month <- month(start_date)
ev_ts <- ts(monthly_trends$EV_Registrations,
start = c(start_year, start_month),
frequency = 12)
# STEP 5: Fit ARIMA model
arima_model <- auto.arima(ev_ts)
# STEP 6: Forecast next 12 months
forecast_result <- forecast(arima_model, h = 12)
# STEP 7: Plot forecast
autoplot(forecast_result) +
labs(
title = "Monthly EV Registration Forecast (ARIMA)",
x = "Year",
y = "Number of Registrations"
) +
theme_minimal(base_size = 14)
summary(arima_model)
model_order <- arimaorder(arima_model)  # Get p, d, q
model_aic <- AIC(arima_model)
ggplot2::autoplot(forecast(arima_model, h = 12)) +
labs(
title = paste0("Monthly EV Registration Forecast - ARIMA(",
model_order[1], ",", model_order[2], ",", model_order[3], ")"),
subtitle = paste("AIC:", round(model_aic, 2)),
x = "Year",
y = "EV Registrations"
) +
theme_minimal(base_size = 14)
library(gridExtra)
# Create the plot
p <- autoplot(forecast(arima_model, h = 12)) +
labs(
title = "Monthly EV Forecast",
subtitle = paste0("ARIMA Order: (", paste(arimaorder(arima_model), collapse = ","),
") | AIC: ", round(AIC(arima_model), 2)),
x = "Year",
y = "Registrations"
) +
theme_minimal()
# Create a table with key values
text <- paste(capture.output(summary(arima_model)), collapse = "\n")
grid.arrange(p, top = text)
